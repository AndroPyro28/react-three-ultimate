import { useLoader } from '@react-three/fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { useGLTF } from '@react-three/drei';
import * as THREE from "three";
import { GLTF } from "three-stdlib";

// export function TiltTree() {
//     const tiltTree = useGLTF('../public/models/tilt_tree.glb');
//     tiltTree.scene.traverse((object) => {
//         if('isMesh' in object && object.isMesh) {
//             object.castShadow = true
//         } 
//     })
//     return (
//         <primitive object={tiltTree.scene}></primitive>
//     );
// }


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: bedo.waves (https://sketchfab.com/bedo.waves)
License: CC-BY-SA-4.0 (http://creativecommons.org/licenses/by-sa/4.0/)
Source: https://sketchfab.com/3d-models/tilt-tree-a3b1c7d1b2c84e3e80fd2d495b275345
Title: Tilt Tree
*/


type GLTFResultLowSakuraTreeTree = GLTF & {
  nodes: {
    Object_2: THREE.Mesh;
    Object_3: THREE.Mesh;
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
  };
};

export function LowSakuraTreeTree(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "../public/models/free_low_poly_sakura_tree.glb"
  ) as GLTFResultLowSakuraTreeTree;
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials["Material.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials["Material.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials["Material.003"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials["Material.004"]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("../public/models/free_low_poly_sakura_tree.glb");

type GLTFResultTiltTree = GLTF & {
  nodes: {
    Object_4: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_9: THREE.Mesh;
    Object_11: THREE.Mesh;
  };
  materials: {
    brush_MatteHull: THREE.MeshStandardMaterial;
    brush_Spikes: THREE.MeshStandardMaterial;
  };
};

export function TiltTree(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("../public/models/tilt_tree.glb") as GLTFResultTiltTree;
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_4.geometry}
        material={materials.brush_MatteHull}
        // material-color={'yellow'}

      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_6.geometry}
        material={materials.brush_Spikes}
        // material-color={'red'}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_9.geometry}
        material={materials.brush_Spikes}
        // to change material color of the mesh
        // material-color={'blue'}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_11.geometry}
        material={materials.brush_MatteHull}
        // material-color={'pink'}

      />
    </group>
  );
}

useGLTF.preload("../public/models/tilt_tree.glb");


